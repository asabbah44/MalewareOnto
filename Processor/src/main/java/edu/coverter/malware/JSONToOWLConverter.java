package edu.coverter.malware;

import org.apache.jena.ontology.Individual;
import org.apache.jena.ontology.OntModel;
import org.apache.jena.rdf.model.ModelFactory;
import org.apache.jena.vocabulary.RDF;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class JSONToOWLConverter {
    public static final String androidOntologyIRI = "http://secuirty.birzeit.edu/android_malware_ontology";
    public static final String ontologyIRI = "http://idea.rpi.edu/malont";
    public static OntModel ontologyModel;

    static {
        // Load the ontology
        ontologyModel = ModelFactory.createOntologyModel();
        ontologyModel.read("AndMalOnt.owl");
    }

    public static void process(String[] args) {
        String jsonString = args[0]; //"{\"query_status\":\"ok\",\"data\":[{\"sha256_hash\":\"3335f6bcfb168bfad8fe8622f515ffc6e4e3b74c9bab6b77f994017483ad35ca\",\"sha3_384_hash\":\"4978e72d546964948d4836970991611f4890f1aaea618102c1585d0c0d30a108b6a06303a7b03435b4a3383649019c26\",\"sha1_hash\":\"190122935eafdbf0d1c5b0a7c86cb24c04aee308\",\"md5_hash\":\"0d0faa3ffb8ea5d041d2dd24b544d2b1\",\"first_seen\":\"2020-07-24 09:18:30\",\"last_seen\":null,\"file_name\":\"File 2.exe\",\"file_size\":809472,\"file_type_mime\":\"application\\/x-dosexec\",\"file_type\":\"exe\",\"reporter\":\"abuse_ch\",\"anonymous\":0,\"signature\":\"Loki\",\"imphash\":\"45d579faec0eaf279c0841b2233727cf\",\"tlsh\":\"D2057E62E291D876D02605398C6BD638582BBF257578491F2BE93C0C6F7738234BBD4B\",\"telfhash\":null,\"gimphash\":null,\"ssdeep\":\"12288:zRmJ34UqACPQoKwICzPhVifZWFuGZkTP2bjmgqLOXtujGyY\",\"dhash_icon\":null,\"tags\":[\"exe\",\"Loki\"],\"intelligence\":{\"clamav\":[\"PUA.Win.Adware.Slugin-6803969-0\",\"PUA.Win.Adware.Slugin-6840354-0\",\"SecuriteInfo.com.Win32.Herz.B.125.14884.UNOFFICIAL\",\"Win.Trojan.Hzzv-7433640-0\"],\"downloads\":\"77\",\"uploads\":\"1\",\"mail\":{\"Generic\":\"low\"}}},{\"sha256_hash\":\"97938446027c2f5c4c5eeebff3b37cb3812da2fe45f092fbe84da5c590a25a85\",\"sha3_384_hash\":\"553a03ed1ba38c7604dfa2a421371b6f3e9e0576f12735707755c59eb8e0f3aeab707884c4511b207e5b30d25a7fa695\",\"sha1_hash\":\"9979b550d2414f1e97d51b44116ae4fb14ea9265\",\"md5_hash\":\"943c81115f3e9d31fd1ef58690d46acc\",\"first_seen\":\"2020-07-23 13:49:30\",\"last_seen\":null,\"file_name\":\"commercial invoice + packing list.exe\",\"file_size\":744960,\"file_type_mime\":\"application\\/x-dosexec\",\"file_type\":\"exe\",\"reporter\":\"James_inthe_box\",\"anonymous\":0,\"signature\":\"AgentTesla\",\"imphash\":\"45d579faec0eaf279c0841b2233727cf\",\"tlsh\":\"48F7AE7E0D9ACCC53B8EBB000112C9137B72F75E43A37B53A9158F63A30D0A16BD4295\",\"telfhash\":null,\"gimphash\":null,\"ssdeep\":\"12288:MsCp5fROBcDg+QKQCAPhVifZWFuGZkTP2bjmgqLOXtujGyY\",\"dhash_icon\":null,\"tags\":[\"exe\",\"AgentTesla\"],\"intelligence\":{\"clamav\":[\"PUA.Win.Tool.AgentTesla-6912114-0\",\"PUA.Win.Tool.AgentTesla-6942272-0\",\"SecuriteInfo.com.Win32.Malware.161539.UNOFFICIAL\",\"Win.Trojan.AgentTesla-1621010-0\"]}}]}";

        try {
            JSONObject jsonObject = new JSONObject(jsonString);


            // Retrieving values from the JSON object
            String queryStatus = jsonObject.getString("query_status");
//            System.out.println("Query Status: " + queryStatus);

            JSONArray dataArray = jsonObject.getJSONArray("data");
            for (int i = 0; i < dataArray.length(); i++) {
                JSONObject dataObject = dataArray.getJSONObject(i);

                String sha256Hash = dataObject.getString("sha256_hash");


                // Add properties to the malware individual
                Individual fileIndividual = createIndividual(androidOntologyIRI, "#File", sha256Hash);

                Individual SHAIndividual = createIndividual(androidOntologyIRI, "#SHA-2", sha256Hash);

                Individual SHA256DigIndividual = createIndividual(androidOntologyIRI,
                        "#HashDigestSize", "256");

                SHAIndividual.addProperty(ontologyModel.getProperty(
                        androidOntologyIRI + "#hasHashDigestSize"), SHA256DigIndividual);

                fileIndividual.addProperty(ontologyModel.getProperty(
                        androidOntologyIRI + "#hasHash"), SHAIndividual);


                String sha3Hash = dataObject.getString("sha3_384_hash");
                Individual sha3HashIndividual = createIndividual(androidOntologyIRI, "#SHA-3", sha3Hash);
                Individual sha3_384HashDigIndividual = createIndividual(androidOntologyIRI, "#HashDigestSize", "384");

                sha3HashIndividual.addProperty(ontologyModel.getProperty(
                        androidOntologyIRI + "#hasHashDigestSize"), sha3_384HashDigIndividual);
                fileIndividual.addProperty(ontologyModel.getProperty(
                        androidOntologyIRI + "#hasHash"), sha3HashIndividual);

                String sha1Hash = dataObject.getString("sha1_hash");
//
                Individual sha1HashIndividual = createIndividual(ontologyIRI, "#SHA-1", sha1Hash);
                Individual sha1_160HashDigIndividual = createIndividual(androidOntologyIRI, "#HashDigestSize", "160");

                sha1HashIndividual.addProperty(ontologyModel.getProperty(
                        ontologyIRI + "#hasHashDigestSize"), sha1_160HashDigIndividual);
                fileIndividual.addProperty(ontologyModel.getProperty(
                        androidOntologyIRI + "#hasHash"), sha1HashIndividual);

                String md5Hash = dataObject.getString("md5_hash");
                Individual md5HashIndividual = createIndividual(ontologyIRI, "#MD5", md5Hash);

                fileIndividual.addProperty(ontologyModel.getProperty(
                        androidOntologyIRI + "#hasHash"), md5HashIndividual);

                String imphash = dataObject.isNull("imphash") ?
                        null : dataObject.getString("imphash");
                if (imphash != null) {
                    Individual imphashHashIndividual = createIndividual(androidOntologyIRI,
                            "#IMPHASH", imphash);
                    fileIndividual.addProperty(ontologyModel.getProperty(
                            androidOntologyIRI + "#hasHash"), imphashHashIndividual);
                }

                String gimphash = dataObject.isNull("gimphash") ?
                        null : dataObject.getString("gimphash");
                if (gimphash != null) {
                    Individual gimphashHashIndividual = createIndividual(androidOntologyIRI,
                            "#GIMHASH", gimphash);
                    fileIndividual.addProperty(ontologyModel.getProperty(
                            androidOntologyIRI + "#hasHash"), gimphashHashIndividual);
                }
                String telfhash = dataObject.isNull("telfhash") ?
                        null : dataObject.getString("telfhash");
                if (telfhash != null) {
                    Individual telfhashHashIndividual = createIndividual(androidOntologyIRI,
                            "#TELIFHASH", imphash);
                    fileIndividual.addProperty(ontologyModel.getProperty(
                            androidOntologyIRI + "#hasHash"), telfhashHashIndividual);
                }
                String ssdeep = dataObject.isNull("ssdeep") ?
                        null : dataObject.getString("ssdeep");
                if (ssdeep != null) {
                    Individual ssdeephhashHashIndividual = createIndividual(ontologyIRI,
                            "#SSDeep", ssdeep);
                    fileIndividual.addProperty(ontologyModel.getProperty(
                            androidOntologyIRI + "#hasHash"), ssdeephhashHashIndividual);
                }
                String tlsh = dataObject.isNull("tlsh") ?
                        null : dataObject.getString("tlsh");
                if (tlsh != null) {
                    Individual tlshhashHashIndividual = createIndividual(androidOntologyIRI,
                            "#TELIFHASH", tlsh);
                    fileIndividual.addProperty(ontologyModel.getProperty(
                            androidOntologyIRI + "#hasHash"), tlshhashHashIndividual);
                }

                Individual statisticIndividual = createIndividual(androidOntologyIRI,
                        "#Statistic", sha256Hash);
                //
                String first_seen = dataObject.isNull("first_seen") ? null : dataObject.getString("first_seen");
                String last_seen = dataObject.isNull("last_seen") ? null : dataObject.getString("last_seen");

                if (first_seen != null)
                    statisticIndividual.addProperty(ontologyModel.getProperty(
                            androidOntologyIRI + "#hasFirstSeen"), first_seen);

                if (last_seen != null)
                    statisticIndividual.addProperty(ontologyModel.getProperty(
                            androidOntologyIRI + "#hasLastSeen"), last_seen);


                String reporter = dataObject.isNull("reporter") ? null : dataObject.getString("reporter");
                Individual malwareReporterIndividual = null;
                if (reporter != null) {
                    malwareReporterIndividual = createIndividual(androidOntologyIRI,
                            "#MalwareReporter", reporter);

                    fileIndividual.addProperty(ontologyModel.getProperty(
                                    ontologyIRI + "#hasReporter"),
                            malwareReporterIndividual);
                }
                Individual malwareIndv = createIndividual(ontologyIRI,
                        "#Malware", sha256Hash);
                fileIndividual.addProperty(ontologyModel.getProperty(
                                androidOntologyIRI + "#contains"),
                        malwareIndv);
                String signature = "";

                signature = dataObject.isNull("signature") ?
                        null : dataObject.getString("signature");
                if (signature != null && signature.length() > 0) {
                    Individual hasMalwareSignature = createIndividual(ontologyIRI,
                            "#MalwareFamily", signature);
                    malwareIndv.addProperty(ontologyModel.getProperty(
                                    androidOntologyIRI + "#hasMalwareFamily"),
                            hasMalwareSignature);
                }
                String hasDeliveryMethod = dataObject.isNull("delivery_method") ? null : dataObject.getString("delivery_method");

                if (hasDeliveryMethod != null) {
                    Individual deliveryMethod = createIndividual(androidOntologyIRI,
                            "#DeliveryMethod", hasDeliveryMethod);
                    malwareIndv.addProperty(ontologyModel.getProperty(
                                    androidOntologyIRI + "#hasDeliveryMethod"),
                            deliveryMethod);
                }


                String comment = dataObject.isNull("comment") ?
                        null : dataObject.getString("comment");
                if (comment != null) {
                    fileIndividual.addProperty(ontologyModel.getProperty(
                                    androidOntologyIRI + "#hasComment"),
                            comment);
                }


                JSONArray yaraRules = dataObject.isNull("yara_rules") ?
                        null : dataObject.getJSONArray("yara_rules");
                if (yaraRules != null)
                    for (int i2 = 0; i2 < yaraRules.length(); i2++) {
                        JSONObject rule = yaraRules.getJSONObject(i2);

                        String rule_name = rule.isNull("rule_name") ?
                                null : rule.getString("rule_name");
                        if (rule_name != null) {
                            Individual individual = createIndividual(androidOntologyIRI,
                                    "#YaraRules", rule_name);

                            if (rule_name != null) {
                                individual.addProperty(ontologyModel.getProperty(
                                                androidOntologyIRI + "#hasRuleName"),
                                        rule_name);
                            }

                            String author = rule.isNull("author") ?
                                    null : rule.getString("author");
                            if (author != null) {
                                individual.addProperty(ontologyModel.getProperty(
                                                androidOntologyIRI + "#hasRuleAuthor"),
                                        author);
                            }
                            String description = rule.isNull("description") ?
                                    null : rule.getString("description");
                            if (description != null) {
                                individual.addProperty(ontologyModel.getProperty(
                                                androidOntologyIRI + "#hasRuleDescription"),
                                        description);
                            }
                            String reference = rule.isNull("reference") ?
                                    null : rule.getString("reference");
                            if (reference != null) {
                                individual.addProperty(ontologyModel.getProperty(
                                                androidOntologyIRI + "#hasRuleReference"),
                                        reference);

                            }
                            malwareIndv.addProperty(ontologyModel.getProperty(
                                            androidOntologyIRI + "#hasDetectedBy"),
                                    individual);
                        }
                    }

                String hasProtectedPassword = dataObject.isNull("archive_pw") ?
                        null : dataObject.getString("archive_pw");
                if (hasProtectedPassword != null) {
                    fileIndividual.addProperty(ontologyModel.getProperty(
                                    androidOntologyIRI + "#hasProtectedPassword"),
                            hasProtectedPassword);
                }


                JSONArray tagsArray = dataObject.isNull("tags") ? null : dataObject.getJSONArray("tags");
//                System.out.println("tagsArray Results:");
                if (tagsArray != null)
                    for (int j = 0; j < tagsArray.length(); j++) {
                        String tagResult = tagsArray.getString(j);
                        Individual individual = createIndividual(androidOntologyIRI,
                                "#Tag", tagResult);
                        fileIndividual.addProperty(ontologyModel.getProperty(
                                androidOntologyIRI + "#hasTag"), individual);
                    }


                try {

                    JSONArray codeSignArray = dataObject.isNull("code_sign") ? null :
                            dataObject.getJSONArray("code_sign");
                    if (codeSignArray != null)
                        for (int i1 = 0; i1 < codeSignArray.length(); i1++) {
                            JSONObject codeSignObject = codeSignArray.getJSONObject(i1);
                            // Get the values of the properties
                            String subjectCn = codeSignObject.getString("subject_cn");
                            String issuerCn = codeSignObject.getString("issuer_cn");
                            String algorithm = codeSignObject.getString("algorithm");
                            String validFrom = codeSignObject.getString("valid_from");
                            String validTo = codeSignObject.getString("valid_to");
                            String serialNumber = codeSignObject.getString("serial_number");
                            String thumbprintAlgorithm = codeSignObject.getString("thumbprint_algorithm");
                            String thumbprint = codeSignObject.getString("thumbprint");
                            boolean cscbListed = codeSignObject.getBoolean("cscb_listed");
                            String cscbReason = codeSignObject.getString("cscb_reason");

                            Individual codeSignIndividual = createIndividual(androidOntologyIRI,
                                    "#Certificate", thumbprint);
                            fileIndividual.addProperty(ontologyModel.getProperty(
                                    androidOntologyIRI + "#hasCodeSign"), codeSignIndividual);

                            Individual appPublisherIndividual =
                                    createIndividual(androidOntologyIRI,
                                            "#AppPublisher", issuerCn);

                            codeSignIndividual.addProperty(ontologyModel.getProperty(
                                    androidOntologyIRI + "#hasOwner"), appPublisherIndividual);


                            codeSignIndividual.addProperty(ontologyModel.getProperty(
                                    androidOntologyIRI + "#hasCscbListed"), cscbListed + "");
                            codeSignIndividual.addProperty(ontologyModel.getProperty(
                                    androidOntologyIRI + "#hasCscbReason"), cscbReason + "");
                            codeSignIndividual.addProperty(ontologyModel.getProperty(
                                    androidOntologyIRI + "#hasIssuerCN"), issuerCn + "");
                            codeSignIndividual.addProperty(ontologyModel.getProperty(
                                    androidOntologyIRI + "#hasSerialNumber"), serialNumber + "");
                            codeSignIndividual.addProperty(ontologyModel.getProperty(
                                            androidOntologyIRI + "#hasValidFrom"),
                                    validFrom + "");
                            codeSignIndividual.addProperty(ontologyModel.getProperty(
                                            androidOntologyIRI + "#hasValidTo"),
                                    validTo + "");

                            codeSignIndividual.addProperty(ontologyModel.getProperty(
                                    androidOntologyIRI + "#hasSubjectCN"), subjectCn + "");

                            codeSignIndividual.addProperty(ontologyModel.getProperty(
                                    androidOntologyIRI + "#hasAlgorithm"), algorithm);
                            //todo check the SHA type
                            Individual SHAIndividual1 =
                                    createIndividual(androidOntologyIRI, "#SHA-2",
                                            thumbprint);

                            Individual SHA256DigIndividual1 =
                                    createIndividual(androidOntologyIRI,
                                            "#HashDigestSize", "256");

                            SHAIndividual1.addProperty(ontologyModel.getProperty(
                                            androidOntologyIRI + "#hasHashDigestSize"),
                                    SHA256DigIndividual1);

                            codeSignIndividual.addProperty(ontologyModel.getProperty(
                                            androidOntologyIRI + "#hasThumbprint"),
                                    SHAIndividual1 + "");
                        }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    JSONObject intelligenceObject =
                            dataObject.getJSONObject("intelligence");
                    JSONArray array =
                            dataObject.isNull("clamav") ?
                                    null : dataObject.getJSONArray("clamav");
//                System.out.println("tagsArray Results:");
                    if (array != null)
                        for (int j = 0; j < array.length(); j++) {
                            String tagResult = array.getString(j);
                            Individual individual = createIndividual(androidOntologyIRI,
                                    "#IntelligenceRule", tagResult);
                            malwareIndv.addProperty(ontologyModel.getProperty(
                                    androidOntologyIRI + "#hasDetectedBy"), individual);
                        }

                    String downloads = intelligenceObject.getString("downloads");
                    String uploads = intelligenceObject.getString("uploads");
                    String mail = intelligenceObject.isNull("mail") ? null : intelligenceObject.getString("mail");

                    statisticIndividual.addProperty(ontologyModel.getProperty(
                            androidOntologyIRI + "#hasDownloads"), downloads);
                    statisticIndividual.addProperty(ontologyModel.getProperty(
                            androidOntologyIRI + "#hasUploads"), uploads);
                    fileIndividual.addProperty(ontologyModel.getProperty(
                            androidOntologyIRI + "#hasIntelligence"), statisticIndividual);
                    //todo ensure that this relation is right.
                    if (malwareReporterIndividual != null && mail != null) {
                        Individual individual = createIndividual(androidOntologyIRI,
                                "#ContactInfo", mail);
                        individual.addProperty(ontologyModel.getProperty(
                                androidOntologyIRI + "#hasEmailAddress"), mail);
                        malwareReporterIndividual.addProperty(ontologyModel.getProperty(
                                androidOntologyIRI + "#hasContactInfo"), individual);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    JSONObject vendorIntelObject = dataObject.getJSONObject("vendor_intel");
                    int vendorIntCounter = 1;
                    // Get the values of the properties within the "vendor_intel" object
                    if (!vendorIntelObject.isNull("CERT-PL_MWDB")) {
                        JSONObject certPlMwdb = vendorIntelObject.getJSONObject("CERT-PL_MWDB");
                        String certPlMwdbDetection = certPlMwdb.isNull("detection") ? null : certPlMwdb.getString("detection");
                        String certPlMwdbLink = certPlMwdb.getString("link");

                        Individual individual = createIndividual(androidOntologyIRI,
                                "#VendorIntelligence", "CERT_PL_MWDB_" + sha256Hash);

                        if (certPlMwdbDetection != null)
                            individual.addProperty(ontologyModel.getProperty(
                                            androidOntologyIRI + "#hasDetectionStatus"),
                                    certPlMwdbDetection);

                        if (certPlMwdbLink != null)
                            individual.addProperty(ontologyModel.getProperty(
                                    androidOntologyIRI + "#hasReportUrl"), certPlMwdbLink);

                        fileIndividual.addProperty(ontologyModel.getProperty(
                                        androidOntologyIRI + "#analyzedBy"),
                                individual);


                    }

                    if (!vendorIntelObject.isNull("YOROI_YOMI")) {
                        JSONObject yoroiYomi = vendorIntelObject.getJSONObject("YOROI_YOMI");
                        String yoroiYomiDetection = yoroiYomi.getString("detection");
                        String yoroiYomiScore = yoroiYomi.getString("score");

                        Individual individual = createIndividual(androidOntologyIRI,
                                "#VendorIntelligence", "YOROI_YOMI_" + sha256Hash);

                        if (yoroiYomiDetection != null)
                            individual.addProperty(ontologyModel.getProperty(
                                    androidOntologyIRI + "#hasDetectionStatus"), yoroiYomiDetection);
                        if (yoroiYomiScore != null)
                            individual.addProperty(ontologyModel.getProperty(
                                    androidOntologyIRI + "#hasDetectionScore"), yoroiYomiScore);


                        fileIndividual.addProperty(ontologyModel.getProperty(
                                        androidOntologyIRI + "#analyzedBy"),
                                individual);

                    }
                    if (!vendorIntelObject.isNull("InQuest")) {
                        JSONObject inQuest = vendorIntelObject.getJSONObject("InQuest");
                        String inQuestVerdict = inQuest.getString("verdict");
                        String inQuestUrl = inQuest.isNull("url") ? null :
                                inQuest.getString("url");
//                        JSONArray inQuestDetails = inQuest.getJSONArray("details");

                        Individual individual = createIndividual(androidOntologyIRI,
                                "#VendorIntelligence", "InQuest_" + sha256Hash);

                        if (inQuestVerdict != null)
                            individual.addProperty(ontologyModel.getProperty(
                                    androidOntologyIRI + "#hasDetectionStatus"), inQuestVerdict);
                        if (inQuestUrl != null)
                            individual.addProperty(ontologyModel.getProperty(
                                    androidOntologyIRI + "#hasReportUrl"), inQuestUrl);

                        fileIndividual.addProperty(ontologyModel.getProperty(
                                        androidOntologyIRI + "#analyzedBy"),
                                individual);
                    }
                    if (!vendorIntelObject.isNull("Triage")) {
                        JSONObject triage = vendorIntelObject.getJSONObject("Triage");
//                        String triageMalwareFamily = triage.isNull("malware_family") ? null : triage.getString("malware_family");
                        String triageScore = triage.isNull("triage") ? null : triage.getString("triage");
                        String triageLink = triage.getString("link");
//                        JSONArray triageTags = triage.getJSONArray("tags");
//                        JSONArray triageSignatures = triage.getJSONArray("signatures");
//                        JSONArray triageMalwareConfig = triage.getJSONArray("malware_config");

                        Individual individual = createIndividual(androidOntologyIRI,
                                "#VendorIntelligence", "Triage_" + sha256Hash);

                        if (triageLink != null)
                            individual.addProperty(ontologyModel.getProperty(
                                    androidOntologyIRI + "#hasReportUrl"), triageLink);
                        if (triageScore != null)
                            individual.addProperty(ontologyModel.getProperty(
                                    androidOntologyIRI + "#hasDetectionScore"), triageScore);

                        fileIndividual.addProperty(ontologyModel.getProperty(
                                        androidOntologyIRI + "#analyzedBy"),
                                individual);
                    }
                    if (!vendorIntelObject.isNull("ReversingLabs")) {
                        JSONObject reversingLabs = vendorIntelObject.getJSONObject("ReversingLabs");
                        String reversingLabsThreatName = vendorIntelObject.isNull("threat_name") ? null : vendorIntelObject.getString("threat_name");
                        String reversingLabsStatus = reversingLabs.getString("status");
//                        String reversingLabsFirstSeen = reversingLabs.getString("first_seen");
                        String reversingLabsScannerCount = reversingLabs.getString("scanner_count");
                        String reversingLabsScannerMatch = reversingLabs.getString("scanner_match");
                        String scanner_percent = reversingLabs.getString("scanner_percent");

                        Individual individual = createIndividual(androidOntologyIRI,
                                "#VendorIntelligence", "ReversingLabs_" + sha256Hash);
                        if (scanner_percent != null)
                            individual.addProperty(ontologyModel.getProperty(
                                    androidOntologyIRI + "#hasDetectionScore"), scanner_percent);
                        if (reversingLabsStatus != null)
                            individual.addProperty(ontologyModel.getProperty(
                                    androidOntologyIRI + "#hasDetectionStatus"), reversingLabsStatus);
//        individual.addProperty(ontologyModel.getProperty(
//                ontologyIRI +"#hasLink"), fileScanIOReportLink);

                        fileIndividual.addProperty(ontologyModel.getProperty(
                                        androidOntologyIRI + "#analyzedBy"),
                                individual);
                    }

                    if (!vendorIntelObject.isNull("Spamhaus_HBL")) {
                        JSONArray spamhausHBL = vendorIntelObject.getJSONArray("Spamhaus_HBL");
                        JSONObject spamhausHBLObject = spamhausHBL.getJSONObject(0);
                        String spamhausHBLDetection = spamhausHBLObject.getString("detection");
                        String spamhausHBLLink = spamhausHBLObject.getString("link");

                        Individual individual = createIndividual(androidOntologyIRI,
                                "#VendorIntelligence", "Spamhaus_HBL_" + sha256Hash);

                        individual.addProperty(ontologyModel.getProperty(
                                androidOntologyIRI + "#hasDetectionStatus"), spamhausHBLDetection);
                        individual.addProperty(ontologyModel.getProperty(
                                androidOntologyIRI + "#hasReportUrl"), spamhausHBLLink);

                        fileIndividual.addProperty(ontologyModel.getProperty(
                                        androidOntologyIRI + "#analyzedBy"),
                                individual);
                    }
                    if (!vendorIntelObject.isNull("FileScan-IO")) {
                        JSONObject fileScanIO = vendorIntelObject.getJSONObject("FileScan-IO");
                        String fileScanIOVerdict = fileScanIO.isNull("verdict") ? null : fileScanIO.getString("verdict");
                        String fileScanIOThreatLevel = fileScanIO.isNull("threatlevel") ? null : fileScanIO.getString("threatlevel");
                        String fileScanIOConfidence = fileScanIO.isNull("confidence") ? null : fileScanIO.getString("confidence");
                        String fileScanIOReportLink = fileScanIO.getString("report_link");

                        Individual individual = createIndividual(androidOntologyIRI,
                                "#VendorIntelligence", "FileScan_IO_" + sha256Hash);

                        if (fileScanIOConfidence != null)
                            individual.addProperty(ontologyModel.getProperty(
                                    androidOntologyIRI + "#hasDetectionScore"), fileScanIOConfidence);

                        if (fileScanIOVerdict != null)
                            individual.addProperty(ontologyModel.getProperty(
                                    androidOntologyIRI + "#hasDetectionStatus"), fileScanIOVerdict);
                        if (fileScanIOReportLink != null)
                            individual.addProperty(ontologyModel.getProperty(
                                    androidOntologyIRI + "#hasReportUrl"), fileScanIOReportLink);

                        fileIndividual.addProperty(ontologyModel.getProperty(
                                        androidOntologyIRI + "#analyzedBy"),
                                individual);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                String origin_country = dataObject.isNull("origin_country") ? null : dataObject.getString("origin_country");
                if (origin_country != null) {
                    Individual countryIndividual = createIndividual(ontologyIRI,
                            "#Country", origin_country);
                    fileIndividual.addProperty(ontologyModel.getProperty(
                            androidOntologyIRI + "#ReportedFrom"), countryIndividual);
                }

                String hasFileTypeMIME = dataObject.getString("file_type_mime");
                fileIndividual.addProperty(ontologyModel.getProperty(
                        androidOntologyIRI + "#hasFileTypeMIME"), hasFileTypeMIME);

                int fileSize = dataObject.getInt("file_size");
                fileIndividual.addProperty(ontologyModel.getProperty(
                        androidOntologyIRI + "#hasFileSize"), fileSize + "");


                String fileName = dataObject.getString("file_name");
                fileIndividual.addProperty(ontologyModel.getProperty(
                        androidOntologyIRI + "#hasFileName"), getClearText(fileName) + "");

                fileIndividual.addProperty(ontologyModel.getProperty(
                        androidOntologyIRI + "#hasFileExtension"), getFileExtension(fileName));

                Individual applicationIndividual = createIndividual(ontologyIRI,
                        "#Application", sha256Hash);

                //todo use correct way to get the appl type and package ID
                applicationIndividual
                        .addProperty(ontologyModel.getProperty(
                                        androidOntologyIRI + "#hasApplicationType"),
                                getFileExtension(fileName));
                applicationIndividual
                        .addProperty(ontologyModel.getProperty(
                                        androidOntologyIRI + "#hasPackageId"),
                                fileName.replace(" ", "."));

                applicationIndividual
                        .addProperty(ontologyModel.getProperty(
                                        androidOntologyIRI + "#hasFile"),
                                fileIndividual);

                Individual operatingSystemIndividual = createIndividual(ontologyIRI,
                        "#OperatingSystem", "OperatingSystem_Android");

                applicationIndividual
                        .addProperty(ontologyModel.getProperty(
                                        androidOntologyIRI + "#compatibleWith"),
                                operatingSystemIndividual);
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }
    }

    private static Individual createIndividual(String iri, String name, String id) {
        id = getClearText(id);
        Individual individual = ontologyModel.createIndividual(
                iri + name + "_" + id,
                ontologyModel.getOntClass(
                        iri +
                                name));
        individual.addProperty(RDF.type,
                ontologyModel.getOntClass(
                        iri +
                                name));
        return individual;
    }

    public static String getFileExtension(String fileName) {
        try {
            if (fileName.lastIndexOf(".") != -1 && fileName.lastIndexOf(".") != 0) {
                return fileName.substring(fileName.lastIndexOf(".") + 1);
            } else {
                return "";
            }
        } catch (Exception e) {
            e.printStackTrace();
            return "";
        }
    }

    private static String getClearText(String id) {
        return id.replaceAll("[^a-zA-Z0-9_.-]", "");
    }

}
