package edu.coverter.malware;

import org.apache.jena.ontology.Individual;
import org.apache.jena.ontology.OntModel;
import org.apache.jena.rdf.model.ModelFactory;
import org.apache.jena.vocabulary.RDF;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.Iterator;
import java.util.Map;

public class JSONParser {
    public static OntModel ontologyModel;

    static {
        // Load the ontology
        ontologyModel = ModelFactory.createOntologyModel();
        ontologyModel.read("AndMalOnt.owl");
    }

    public static void main(String[] args) {
        String jsonString = args[0]; //"{\"query_status\":\"ok\",\"data\":[{\"sha256_hash\":\"3335f6bcfb168bfad8fe8622f515ffc6e4e3b74c9bab6b77f994017483ad35ca\",\"sha3_384_hash\":\"4978e72d546964948d4836970991611f4890f1aaea618102c1585d0c0d30a108b6a06303a7b03435b4a3383649019c26\",\"sha1_hash\":\"190122935eafdbf0d1c5b0a7c86cb24c04aee308\",\"md5_hash\":\"0d0faa3ffb8ea5d041d2dd24b544d2b1\",\"first_seen\":\"2020-07-24 09:18:30\",\"last_seen\":null,\"file_name\":\"File 2.exe\",\"file_size\":809472,\"file_type_mime\":\"application\\/x-dosexec\",\"file_type\":\"exe\",\"reporter\":\"abuse_ch\",\"anonymous\":0,\"signature\":\"Loki\",\"imphash\":\"45d579faec0eaf279c0841b2233727cf\",\"tlsh\":\"D2057E62E291D876D02605398C6BD638582BBF257578491F2BE93C0C6F7738234BBD4B\",\"telfhash\":null,\"gimphash\":null,\"ssdeep\":\"12288:zRmJ34UqACPQoKwICzPhVifZWFuGZkTP2bjmgqLOXtujGyY\",\"dhash_icon\":null,\"tags\":[\"exe\",\"Loki\"],\"intelligence\":{\"clamav\":[\"PUA.Win.Adware.Slugin-6803969-0\",\"PUA.Win.Adware.Slugin-6840354-0\",\"SecuriteInfo.com.Win32.Herz.B.125.14884.UNOFFICIAL\",\"Win.Trojan.Hzzv-7433640-0\"],\"downloads\":\"77\",\"uploads\":\"1\",\"mail\":{\"Generic\":\"low\"}}},{\"sha256_hash\":\"97938446027c2f5c4c5eeebff3b37cb3812da2fe45f092fbe84da5c590a25a85\",\"sha3_384_hash\":\"553a03ed1ba38c7604dfa2a421371b6f3e9e0576f12735707755c59eb8e0f3aeab707884c4511b207e5b30d25a7fa695\",\"sha1_hash\":\"9979b550d2414f1e97d51b44116ae4fb14ea9265\",\"md5_hash\":\"943c81115f3e9d31fd1ef58690d46acc\",\"first_seen\":\"2020-07-23 13:49:30\",\"last_seen\":null,\"file_name\":\"commercial invoice + packing list.exe\",\"file_size\":744960,\"file_type_mime\":\"application\\/x-dosexec\",\"file_type\":\"exe\",\"reporter\":\"James_inthe_box\",\"anonymous\":0,\"signature\":\"AgentTesla\",\"imphash\":\"45d579faec0eaf279c0841b2233727cf\",\"tlsh\":\"48F7AE7E0D9ACCC53B8EBB000112C9137B72F75E43A37B53A9158F63A30D0A16BD4295\",\"telfhash\":null,\"gimphash\":null,\"ssdeep\":\"12288:MsCp5fROBcDg+QKQCAPhVifZWFuGZkTP2bjmgqLOXtujGyY\",\"dhash_icon\":null,\"tags\":[\"exe\",\"AgentTesla\"],\"intelligence\":{\"clamav\":[\"PUA.Win.Tool.AgentTesla-6912114-0\",\"PUA.Win.Tool.AgentTesla-6942272-0\",\"SecuriteInfo.com.Win32.Malware.161539.UNOFFICIAL\",\"Win.Trojan.AgentTesla-1621010-0\"]}}]}";

        try {
            JSONObject jsonObject = new JSONObject(jsonString);


            // Retrieving values from the JSON object
            String queryStatus = jsonObject.getString("query_status");
//            System.out.println("Query Status: " + queryStatus);

            JSONArray dataArray = jsonObject.getJSONArray("data");
            for (int i = 0; i < dataArray.length(); i++) {
                JSONObject dataObject = dataArray.getJSONObject(i);

                String sha256Hash = dataObject.getString("sha256_hash");

                Individual malewareReportIndividual = ontologyModel.createIndividual(
                        "http://secuirty.birzeit.edu/android_malware_ontology#MalwareReport_" + sha256Hash,
                        ontologyModel.getOntClass(
                                "http://secuirty.birzeit.edu/android_malware_ontology#MalwareReport"));


                // Add properties to the malware individual
                malewareReportIndividual.addProperty(RDF.type,
                        ontologyModel.getOntClass(
                                "http://secuirty.birzeit.edu/android_malware_ontology#MalwareReport"));
                malewareReportIndividual.addProperty(ontologyModel.getProperty(
                        "http://secuirty.birzeit.edu/android_malware_ontology#hasSHA256Hash"), sha256Hash);

                String first_seen = dataObject.isNull("first_seen") ? null : dataObject.getString("first_seen");
                String reporter = dataObject.isNull("reporter") ? null : dataObject.getString("reporter");
                String last_seen = dataObject.isNull("last_seen") ? null : dataObject.getString("last_seen");
                String origin_country = dataObject.isNull("origin_country") ? null : dataObject.getString("origin_country");

                String sha3Hash = dataObject.getString("sha3_384_hash");
                malewareReportIndividual.addProperty(ontologyModel.getProperty(
                        "http://secuirty.birzeit.edu/android_malware_ontology#hasSHA3Hash"), sha3Hash);

                String sha1Hash = dataObject.getString("sha1_hash");
                malewareReportIndividual.addProperty(ontologyModel.getProperty("http://secuirty.birzeit.edu/android_malware_ontology#hasSHA1Hash"), sha1Hash);

                String md5Hash = dataObject.getString("md5_hash");
                malewareReportIndividual.addProperty(ontologyModel.getProperty("http://secuirty.birzeit.edu/android_malware_ontology#hasMD5Hash"), md5Hash);

                String fileName = dataObject.getString("file_name");

                Individual malwareReporterIndividual = ontologyModel.createIndividual(
                        "http://secuirty.birzeit.edu/android_malware_ontology#MalwareReporter" +
                                reporter.replace(" ", "_"),
                        ontologyModel.getOntClass(
                                "http://secuirty.birzeit.edu/android_malware_ontology#MalwareReporter"));
                malwareReporterIndividual.addProperty(RDF.type,
                        ontologyModel.getOntClass(
                                "http://secuirty.birzeit.edu/android_malware_ontology#MalwareReporter"));
                malewareReportIndividual.addProperty(ontologyModel.getProperty(
                                "http://secuirty.birzeit.edu/android_malware_ontology#hasReporter"),
                        malwareReporterIndividual);

                Individual applicationIndividual = ontologyModel.createIndividual(
                        "http://idea.rpi.edu/malont#Application_" + fileName.replace(" ", "_"),
                        ontologyModel.getOntClass(
                                "http://idea.rpi.edu/malont#Application"));
                applicationIndividual.addProperty(RDF.type,
                        ontologyModel.getOntClass(
                                "http://idea.rpi.edu/malont#Application"));


                applicationIndividual.addProperty(ontologyModel
                                .getProperty("http://secuirty.birzeit.edu/android_malware_ontology#hasFileName"),
                        fileName.replace(" ", "_"));


                applicationIndividual
                        .addProperty(ontologyModel.getProperty(
                                        "http://secuirty.birzeit.edu/android_malware_ontology#hasPackageId"),
                                fileName.replace(" ", "."));
                applicationIndividual
                        .addProperty(ontologyModel.getProperty(
                                        "http://secuirty.birzeit.edu/android_malware_ontology#hasApplicationType"),
                                "APK");

                Individual malwareIndv = ontologyModel.createIndividual(
                        "http://idea.rpi.edu/malont#Malware_" + sha256Hash,
                        ontologyModel.getOntClass(
                                "http://idea.rpi.edu/malont#Malware"));
                if (first_seen != null)
                    malwareIndv.addProperty(ontologyModel.getProperty(
                            "http://secuirty.birzeit.edu/android_malware_ontology#hasFirstSeen"), first_seen);

                if (last_seen != null)
                    malwareIndv.addProperty(ontologyModel.getProperty(
                            "http://secuirty.birzeit.edu/android_malware_ontology#hasLastSeen"), last_seen);

                if (origin_country != null)
                    malwareIndv.addProperty(ontologyModel.getProperty(
                            "http://secuirty.birzeit.edu/android_malware_ontology#hasOriginCountry"), origin_country);

                applicationIndividual.addProperty(ontologyModel.getProperty(
                        "http://secuirty.birzeit.edu/android_malware_ontology#hasMalware"), malwareIndv);


                Individual operatingSystemIndividual = ontologyModel.createIndividual(
                        "http://idea.rpi.edu/malont#" + "OperatingSystem_Android",
                        ontologyModel.getOntClass(
                                "http://idea.rpi.edu/malont#OperatingSystem"));
                operatingSystemIndividual.addProperty(RDF.type,
                        ontologyModel.getOntClass(
                                "http://idea.rpi.edu/malont#OperatingSystem"));
                applicationIndividual
                        .addProperty(ontologyModel.getProperty(
                                        "http://secuirty.birzeit.edu/android_malware_ontology#compatibleWith"),
                                operatingSystemIndividual);

                malewareReportIndividual
                        .addProperty(ontologyModel.getProperty(
                                        "http://secuirty.birzeit.edu/android_malware_ontology#reportedOn"),
                                applicationIndividual);


                String hasFileTypeMIME = dataObject.getString("file_type_mime");
                applicationIndividual.addProperty(ontologyModel.getProperty(
                        "http://secuirty.birzeit.edu/android_malware_ontology#hasFileTypeMIME"), hasFileTypeMIME);
                String hasComment = dataObject.isNull("hasComment") ? null : dataObject.getString("hasComment");
                if (hasComment != null)
                    malewareReportIndividual.addProperty(ontologyModel.getProperty(
                                    "http://secuirty.birzeit.edu/android_malware_ontology#hasComment"),
                            hasComment);


                String hasDeliveryMethod = dataObject.isNull("delivery_method") ? null : dataObject.getString("delivery_method");

                if (hasDeliveryMethod != null)
                    malewareReportIndividual.addProperty(ontologyModel.getProperty(
                                    "http://secuirty.birzeit.edu/android_malware_ontology#hasDeliveryMethod"),
                            hasDeliveryMethod);

                int fileSize = dataObject.getInt("file_size");
                applicationIndividual.addProperty(ontologyModel.getProperty(
                        "http://secuirty.birzeit.edu/android_malware_ontology#hasFileSize"), fileSize + "");

                String signature = "";

                try {
                    signature = dataObject.getString("signature");
                } catch (Exception e) {
                }
                if (signature != null && signature.length() > 0) {
                    Individual hasMalwareSignature = ontologyModel.createIndividual(
                            "http://secuirty.birzeit.edu/android_malware_ontology#MalwareSignature_" + signature,
                            ontologyModel.getOntClass(
                                    "http://secuirty.birzeit.edu/android_malware_ontology#MalwareSignature"));

                    malwareIndv.addProperty(ontologyModel.getProperty(
                                    "http://secuirty.birzeit.edu/android_malware_ontology#hasMalwareSignature"),
                            hasMalwareSignature);
                }


                JSONArray tagsArray = dataObject.isNull("tags") ? null : dataObject.getJSONArray("tags");
//                System.out.println("tagsArray Results:");
                if (tagsArray != null)
                    for (int j = 0; j < tagsArray.length(); j++) {
                        String tagResult = tagsArray.getString(j);
//                        System.out.println(tagResult);
//<android_malware_ontology:hasTags rdf:resource="http://secuirty.birzeit.edu/android_malware_ontology#Android"/>
                        malewareReportIndividual.addProperty(ontologyModel.getProperty(
                                "http://secuirty.birzeit.edu/android_malware_ontology#hasTags"), tagResult);
                    }

                try {
                    JSONArray codeSignArray = dataObject.getJSONArray("code_sign");

                    for (int i1 = 0; i1 < codeSignArray.length(); i1++) {
                        JSONObject codeSignObject = codeSignArray.getJSONObject(i1);
                        // Get the values of the properties
                        String subjectCn = codeSignObject.getString("subject_cn");
                        String issuerCn = codeSignObject.getString("issuer_cn");
                        String algorithm = codeSignObject.getString("algorithm");
                        String validFrom = codeSignObject.getString("valid_from");
                        String validTo = codeSignObject.getString("valid_to");
                        String serialNumber = codeSignObject.getString("serial_number");
                        String thumbprintAlgorithm = codeSignObject.getString("thumbprint_algorithm");
                        String thumbprint = codeSignObject.getString("thumbprint");
                        boolean cscbListed = codeSignObject.getBoolean("cscb_listed");
                        String cscbReason = codeSignObject.getString("cscb_reason");

                        Individual appPublisherIndividual = ontologyModel.createIndividual(
                                "http://secuirty.birzeit.edu/android_malware_ontology#AppPublisher_"
                                        + issuerCn.replace(" ", "_"),
                                ontologyModel.getOntClass(
                                        "http://secuirty.birzeit.edu/android_malware_ontology#AppPublisher"));

                        Individual codeSignIndividual = ontologyModel.createIndividual(
                                "http://secuirty.birzeit.edu/android_malware_ontology#CodeSign_" + thumbprint,
                                ontologyModel.getOntClass(
                                        "http://secuirty.birzeit.edu/android_malware_ontology#CodeSign"));

                        // Add properties to the malware individual
                        codeSignIndividual.addProperty(RDF.type,
                                ontologyModel.getOntClass(
                                        "http://secuirty.birzeit.edu/android_malware_ontology#CodeSign"));
                        codeSignIndividual.addProperty(ontologyModel.getProperty(
                                "http://secuirty.birzeit.edu/android_malware_ontology#hasAlgorithm"), algorithm);
                        codeSignIndividual.addProperty(ontologyModel.getProperty(
                                "http://secuirty.birzeit.edu/android_malware_ontology#hasCscbListed"), cscbListed + "");
                        codeSignIndividual.addProperty(ontologyModel.getProperty(
                                "http://secuirty.birzeit.edu/android_malware_ontology#hasCscbReason"), cscbReason + "");
                        codeSignIndividual.addProperty(ontologyModel.getProperty(
                                "http://secuirty.birzeit.edu/android_malware_ontology#hasIssuerCN"), issuerCn + "");
                        codeSignIndividual.addProperty(ontologyModel.getProperty(
                                "http://secuirty.birzeit.edu/android_malware_ontology#hasSerialNumber"), serialNumber + "");

                        codeSignIndividual.addProperty(ontologyModel.getProperty(
                                "http://secuirty.birzeit.edu/android_malware_ontology#hasSubjectCN"), subjectCn + "");
                        codeSignIndividual.addProperty(ontologyModel.getProperty(
                                "http://secuirty.birzeit.edu/android_malware_ontology#hasThumbprint"), thumbprint + "");
                        codeSignIndividual.addProperty(ontologyModel.getProperty(
                                        "http://secuirty.birzeit.edu/android_malware_ontology#hasThumbprintAlgorithm"),
                                thumbprintAlgorithm + "");
                        codeSignIndividual.addProperty(ontologyModel.getProperty(
                                        "http://secuirty.birzeit.edu/android_malware_ontology#hasValidFrom"),
                                validFrom + "");
                        codeSignIndividual.addProperty(ontologyModel.getProperty(
                                        "http://secuirty.birzeit.edu/android_malware_ontology#hasValidTo"),
                                validTo + "");
                        appPublisherIndividual.addProperty(ontologyModel.getProperty(
                                        "http://secuirty.birzeit.edu/android_malware_ontology#hasCodeSign"),
                                codeSignIndividual);

                        applicationIndividual.addProperty(ontologyModel.getProperty(
                                        "http://secuirty.birzeit.edu/android_malware_ontology#hasPublisher"),
                                appPublisherIndividual);

                    }
                } catch (Exception e) {
                }

                try {
                    JSONObject intelligenceObject = dataObject.getJSONObject("intelligence");

                    // Get the values of the properties
                    String clamav = intelligenceObject.isNull("clamav") ? null : intelligenceObject.getString("clamav");
                    String downloads = intelligenceObject.getString("downloads");
                    String uploads = intelligenceObject.getString("uploads");
                    String mail = intelligenceObject.isNull("mail") ? null : intelligenceObject.getString("mail");

                    Individual intelligenceIndividual = ontologyModel.createIndividual(
                            "http://secuirty.birzeit.edu/android_malware_ontology#Intelligence_" + sha256Hash,
                            ontologyModel.getOntClass(
                                    "http://secuirty.birzeit.edu/android_malware_ontology#Intelligence"));

                    // Add properties to the maileware individual
                    intelligenceIndividual.addProperty(RDF.type,
                            ontologyModel.getOntClass(
                                    "http://secuirty.birzeit.edu/android_malware_ontology#Intelligence"));
                    intelligenceIndividual.addProperty(ontologyModel.getProperty(
                            "http://secuirty.birzeit.edu/android_malware_ontology#hasDownloads"), downloads);
                    intelligenceIndividual.addProperty(ontologyModel.getProperty(
                            "http://secuirty.birzeit.edu/android_malware_ontology#hasUploads"), uploads);
                    //todo include clamav and mail
                    malewareReportIndividual.addProperty(ontologyModel.getProperty(
                            "http://secuirty.birzeit.edu/android_malware_ontology#hasIntelligence"), intelligenceIndividual);

                } catch (Exception e) {
                }
                try {
                    JSONObject vendorIntelObject = dataObject.getJSONObject("vendor_intel");

                    // Get the values of the properties within the "vendor_intel" object
                    if (!vendorIntelObject.isNull("CERT-PL_MWDB")) {
                        JSONObject certPlMwdb = vendorIntelObject.getJSONObject("CERT-PL_MWDB");
                        String certPlMwdbDetection = certPlMwdb.isNull("detection") ? null : certPlMwdb.getString("detection");
                        String certPlMwdbLink = certPlMwdb.getString("link");

                        Individual individual = ontologyModel.createIndividual(
                                "http://secuirty.birzeit.edu/android_malware_ontology#vendor_intel_" + sha256Hash + "_" + "CERT_PL_MWDB",
                                ontologyModel.getOntClass(
                                        "http://secuirty.birzeit.edu/android_malware_ontology#VendorIntelligence"));

                        individual.addProperty(RDF.type,
                                ontologyModel.getOntClass(
                                        "http://secuirty.birzeit.edu/android_malware_ontology#VendorIntelligence"));
                        if (certPlMwdbDetection != null)
                            individual.addProperty(ontologyModel.getProperty(
                                            "http://secuirty.birzeit.edu/android_malware_ontology#hasDetection"),
                                    certPlMwdbDetection);
                        if (certPlMwdbLink != null)
                            individual.addProperty(ontologyModel.getProperty(
                                    "http://secuirty.birzeit.edu/android_malware_ontology#hasLink"), certPlMwdbLink);


                        malewareReportIndividual.addProperty(ontologyModel.getProperty(
                                        "http://secuirty.birzeit.edu/android_malware_ontology#hasVendorIntel"),
                                individual);


                    }

                    if (!vendorIntelObject.isNull("YOROI_YOMI")) {
                        JSONObject yoroiYomi = vendorIntelObject.getJSONObject("YOROI_YOMI");
                        String yoroiYomiDetection = yoroiYomi.getString("detection");
                        String yoroiYomiScore = yoroiYomi.getString("score");

                        Individual individual = ontologyModel.createIndividual(
                                "http://secuirty.birzeit.edu/android_malware_ontology#vendor_intel_" + sha256Hash + "_" + "YOROI_YOMI",
                                ontologyModel.getOntClass(
                                        "http://secuirty.birzeit.edu/android_malware_ontology#VendorIntelligence"));

                        individual.addProperty(RDF.type,
                                ontologyModel.getOntClass(
                                        "http://secuirty.birzeit.edu/android_malware_ontology#VendorIntelligence"));
                        if (yoroiYomiDetection != null)
                            individual.addProperty(ontologyModel.getProperty(
                                    "http://secuirty.birzeit.edu/android_malware_ontology#hasDetection"), yoroiYomiDetection);
                        if (yoroiYomiScore != null)
                            individual.addProperty(ontologyModel.getProperty(
                                    "http://secuirty.birzeit.edu/android_malware_ontology#hasDetectionScore"), yoroiYomiScore);


                        malewareReportIndividual.addProperty(ontologyModel.getProperty(
                                        "http://secuirty.birzeit.edu/android_malware_ontology#hasVendorIntel"),
                                individual);

                    }
                    if (!vendorIntelObject.isNull("InQuest")) {
                        JSONObject inQuest = vendorIntelObject.getJSONObject("InQuest");
                        String inQuestVerdict = inQuest.getString("verdict");
                        String inQuestUrl = inQuest.getString("url");
//                        JSONArray inQuestDetails = inQuest.getJSONArray("details");


                        Individual individual = ontologyModel.createIndividual(
                                "http://secuirty.birzeit.edu/android_malware_ontology#vendor_intel_" + sha256Hash + "_" + "InQuest",
                                ontologyModel.getOntClass(
                                        "http://secuirty.birzeit.edu/android_malware_ontology#VendorIntelligence"));

                        individual.addProperty(RDF.type,
                                ontologyModel.getOntClass(
                                        "http://secuirty.birzeit.edu/android_malware_ontology#VendorIntelligence"));
                        if (inQuestVerdict != null)
                            individual.addProperty(ontologyModel.getProperty(
                                    "http://secuirty.birzeit.edu/android_malware_ontology#hasDetection"), inQuestVerdict);
                        if (inQuestUrl != null)
                            individual.addProperty(ontologyModel.getProperty(
                                    "http://secuirty.birzeit.edu/android_malware_ontology#hasLink"), inQuestUrl);

                        malewareReportIndividual.addProperty(ontologyModel.getProperty(
                                        "http://secuirty.birzeit.edu/android_malware_ontology#hasVendorIntel"),
                                individual);
                    }
                    if (!vendorIntelObject.isNull("Triage")) {
                        JSONObject triage = vendorIntelObject.getJSONObject("Triage");
//                        String triageMalwareFamily = triage.isNull("malware_family") ? null : triage.getString("malware_family");
                        String triageScore = triage.isNull("triage") ? null : triage.getString("triage");
                        String triageLink = triage.getString("link");
//                        JSONArray triageTags = triage.getJSONArray("tags");
//                        JSONArray triageSignatures = triage.getJSONArray("signatures");
//                        JSONArray triageMalwareConfig = triage.getJSONArray("malware_config");

                        Individual individual = ontologyModel.createIndividual(
                                "http://secuirty.birzeit.edu/android_malware_ontology#vendor_intel_" + sha256Hash + "_" + "Triage",
                                ontologyModel.getOntClass(
                                        "http://secuirty.birzeit.edu/android_malware_ontology#VendorIntelligence"));

                        individual.addProperty(RDF.type,
                                ontologyModel.getOntClass(
                                        "http://secuirty.birzeit.edu/android_malware_ontology#VendorIntelligence"));
                        if (triageLink != null)
                            individual.addProperty(ontologyModel.getProperty(
                                    "http://secuirty.birzeit.edu/android_malware_ontology#hasLink"), triageLink);
                        if (triageScore != null)
                            individual.addProperty(ontologyModel.getProperty(
                                    "http://secuirty.birzeit.edu/android_malware_ontology#hasDetectionScore"), triageScore);

                        malewareReportIndividual.addProperty(ontologyModel.getProperty(
                                        "http://secuirty.birzeit.edu/android_malware_ontology#hasVendorIntel"),
                                individual);
                    }
                    if (!vendorIntelObject.isNull("ReversingLabs")) {
                        JSONObject reversingLabs = vendorIntelObject.getJSONObject("ReversingLabs");
                        String reversingLabsThreatName = vendorIntelObject.isNull("threat_name") ? null : vendorIntelObject.getString("threat_name");
                        String reversingLabsStatus = reversingLabs.getString("status");
//                        String reversingLabsFirstSeen = reversingLabs.getString("first_seen");
                        String reversingLabsScannerCount = reversingLabs.getString("scanner_count");
                        String reversingLabsScannerMatch = reversingLabs.getString("scanner_match");
                        String scanner_percent = reversingLabs.getString("scanner_percent");


                        Individual individual = ontologyModel.createIndividual(
                                "http://secuirty.birzeit.edu/android_malware_ontology#vendor_intel_" + sha256Hash + "_" + "ReversingLabs",
                                ontologyModel.getOntClass(
                                        "http://secuirty.birzeit.edu/android_malware_ontology#VendorIntelligence"));

                        individual.addProperty(RDF.type,
                                ontologyModel.getOntClass(
                                        "http://secuirty.birzeit.edu/android_malware_ontology#VendorIntelligence"));

                        individual.addProperty(ontologyModel.getProperty(
                                "http://secuirty.birzeit.edu/android_malware_ontology#hasDetection"), reversingLabsStatus);
//        individual.addProperty(ontologyModel.getProperty(
//                "http://secuirty.birzeit.edu/android_malware_ontology#hasLink"), fileScanIOReportLink);

                        malewareReportIndividual.addProperty(ontologyModel.getProperty(
                                        "http://secuirty.birzeit.edu/android_malware_ontology#hasVendorIntel"),
                                individual);


                    }
                    if (!vendorIntelObject.isNull("Spamhaus_HBL")) {
                        JSONArray spamhausHBL = vendorIntelObject.getJSONArray("Spamhaus_HBL");
                        JSONObject spamhausHBLObject = spamhausHBL.getJSONObject(0);
                        String spamhausHBLDetection = spamhausHBLObject.getString("detection");
                        String spamhausHBLLink = spamhausHBLObject.getString("link");

                        Individual individual = ontologyModel.createIndividual(
                                "http://secuirty.birzeit.edu/android_malware_ontology#vendor_intel_" + sha256Hash + "_" + "Spamhaus_HBL",
                                ontologyModel.getOntClass(
                                        "http://secuirty.birzeit.edu/android_malware_ontology#VendorIntelligence"));

                        individual.addProperty(RDF.type,
                                ontologyModel.getOntClass(
                                        "http://secuirty.birzeit.edu/android_malware_ontology#VendorIntelligence"));

                        individual.addProperty(ontologyModel.getProperty(
                                "http://secuirty.birzeit.edu/android_malware_ontology#hasDetection"), spamhausHBLDetection);
                        individual.addProperty(ontologyModel.getProperty(
                                "http://secuirty.birzeit.edu/android_malware_ontology#hasLink"), spamhausHBLLink);

                        malewareReportIndividual.addProperty(ontologyModel.getProperty(
                                        "http://secuirty.birzeit.edu/android_malware_ontology#hasVendorIntel"),
                                individual);
                    }
                    if (!vendorIntelObject.isNull("FileScan-IO")) {
                        JSONObject fileScanIO = vendorIntelObject.getJSONObject("FileScan-IO");
                        String fileScanIOVerdict = fileScanIO.isNull("verdict") ? null : fileScanIO.getString("verdict");
                        String fileScanIOThreatLevel = fileScanIO.isNull("threatlevel") ? null : fileScanIO.getString("threatlevel");
                        String fileScanIOConfidence = fileScanIO.isNull("confidence") ? null : fileScanIO.getString("confidence");
                        String fileScanIOReportLink = fileScanIO.getString("report_link");


                        Individual individual = ontologyModel.createIndividual(
                                "http://secuirty.birzeit.edu/android_malware_ontology#vendor_intel_" + sha256Hash + "_" + "FileScan_IO",
                                ontologyModel.getOntClass(
                                        "http://secuirty.birzeit.edu/android_malware_ontology#VendorIntelligence"));

                        individual.addProperty(RDF.type,
                                ontologyModel.getOntClass(
                                        "http://secuirty.birzeit.edu/android_malware_ontology#VendorIntelligence"));
                        if (fileScanIOVerdict != null)
                            individual.addProperty(ontologyModel.getProperty(
                                    "http://secuirty.birzeit.edu/android_malware_ontology#hasDetection"), fileScanIOVerdict);
                        if (fileScanIOReportLink != null)
                            individual.addProperty(ontologyModel.getProperty(
                                    "http://secuirty.birzeit.edu/android_malware_ontology#hasLink"), fileScanIOReportLink);

                        malewareReportIndividual.addProperty(ontologyModel.getProperty(
                                        "http://secuirty.birzeit.edu/android_malware_ontology#hasVendorIntel"),
                                individual);


                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }
    }

}
