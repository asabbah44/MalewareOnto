package edu.coverter.malware;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;

public class MalwareReportsProcessor {
    static int counter = 0;
    private static String malwareReportAPI = "https://mb-api.abuse.ch/api/v1/";
    private static boolean saveMalwareReportFileLocally = false;
    private static boolean useLocalFiles = true;

    public static void main(String[] args) {
        String csvFile = "./mwapk.csv";
        String line;
        String csvSplitBy = ",";
        if (useLocalFiles) {
            // Specify the directory path
            String directoryPath = "./dataset";

            // Create a File object for the directory
            File directory = new File(directoryPath);

            // Get all files in the directory
            File[] files = directory.listFiles();

            // Iterate over the files and print their names
            if (files != null) {
                for (File file : files) {
                    if (file.isFile()) {
                        System.out.println(file.getName());
                        JSONToOWLConverter.process(new String[]{readFile(file)});
                        System.out.println("-----------------------\n \n");
                        if (counter++ > 5000) break;
                    }
                }
            }
        } else
            try (BufferedReader br = new BufferedReader(new FileReader(csvFile))) {
                // Read the first line containing column headers
                while ((line = br.readLine()) != null) {
                    String mwReportJson = downloadMalwareReport(new String[]{line});
                    if (saveMalwareReportFileLocally) {
                        FileOutputStream f = new FileOutputStream("./dataset/mw_reportNo_" +
                                String.format("%05d", counter));
                        f.write(mwReportJson.getBytes());
                        f.close();
                    }
                    JSONToOWLConverter.process(new String[]{mwReportJson});
                    System.out.println("-----------------------\n \n");
                    if (counter++ > 1) break;
                }
//            JSONParser.ontologyModel.write(System.out, "RDF/XML-ABBREV");
            } catch (IOException e) {
                e.printStackTrace();
            }
        try {
            JSONToOWLConverter.ontologyModel.write(new FileOutputStream("individuals.owl"), "RDF/XML-ABBREV");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static String readFile(File file) {
        StringBuilder content = new StringBuilder();

        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = reader.readLine()) != null) {
                content.append(line);
                content.append("\n"); // Add a line break after each line (optional)
            }
        } catch (IOException e) {
            e.printStackTrace(); // Handle any potential IO errors
        }

        return content.toString();
    }

    public static String downloadMalwareReport(String[] args) {
        OutputStream outputStream = null;
        HttpURLConnection connection = null;
        StringBuilder response = new StringBuilder();
        try {
            // URL and payload
            URL url = new URL(malwareReportAPI);
            String payload = "query=get_info&hash=" + args[0] + "&limit=1";

//            wget --post-data "query=get_imphash&imphash=45d579faec0eaf279c0841b2233727cf&limit=50" https://mb-api.abuse.ch/api/v1/

            // Create connection
            connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("POST");
            connection.setDoOutput(true);

            // Set headers
            connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
            connection.setRequestProperty("Content-Length", String.valueOf(payload.getBytes().length));

            // Write payload to the request body
            outputStream = connection.getOutputStream();
            byte[] input = payload.getBytes(StandardCharsets.UTF_8);
            outputStream.write(input, 0, input.length);


            // Send the request and read response
            int responseCode = connection.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) {
                try (BufferedReader bufferedReader = new BufferedReader(
                        new InputStreamReader(connection.getInputStream()))) {
                    String line;

                    while ((line = bufferedReader.readLine()) != null) {
                        response.append(line);
                    }

                    // Process the response
                    System.out.println(response.toString());
//                    JSONParser.main(new String[]{response.toString()});
                }
            } else {
                System.out.println("Request failed with response code: " + responseCode);
            }

            // Close connection

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (connection != null) {
                    connection.disconnect();
                }
                if (outputStream != null) {
                    outputStream.close();
                }
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return response.toString();
    }
}
